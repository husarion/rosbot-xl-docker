ARG ROS_DISTRO=humble
ARG ROSBOT_FW_RELEASE=v1.3.0
ARG PREFIX=

## ============================ STM32FLASH =================================
# stm32flash needs an older version of glibc (2.28), which is why ubuntu 18.04 was used
# official releases are only for intel archs, so we need to build stm32flash from sources
FROM ubuntu:18.04 AS stm32flash_builder

SHELL ["/bin/bash", "-c"]

# official releases are only for intel archs, so we need to build stm32flash from sources
RUN apt-get update && apt-get install -y \
        git \
        build-essential

RUN git clone https://github.com/stm32duino/stm32flash.git && \
    cd stm32flash/ && \
    make all

## =========================== Firmware ================================

FROM --platform=linux/amd64 ubuntu:20.04 AS stm32_firmware

ARG ROSBOT_FW_RELEASE

SHELL ["/bin/bash", "-c"]

# official releases are only for intel archs, so we need to build stm32flash from sources
RUN apt-get update && apt-get install -y \
        curl \
        python3 \
        python3-pip

RUN echo ros_distro=$ROS_DISTRO firmware_release=$ROSBOT_FW_RELEASE

# get firmware
RUN curl -L https://github.com/husarion/rosbot_xl_firmware/releases/download/$ROSBOT_FW_RELEASE/firmware.bin -o /firmware.bin

# build a binary for reading the CPU ID
COPY read_cpu_id/ /read_cpu_id

RUN pip3 install -U platformio && \
    cd /read_cpu_id && \
    pio run && \
    chmod -x .pio/build/olimex_e407/firmware.bin

## =========================== ROS image ===============================
FROM husarnet/ros:${PREFIX}${ROS_DISTRO}-ros-core

ARG PREFIX

# select bash as default shell
SHELL ["/bin/bash", "-c"]

WORKDIR /ros2_ws

COPY ./healthcheck.cpp /

# install everything needed
RUN MYDISTRO=${PREFIX:-ros}; MYDISTRO=${MYDISTRO//-/} && \
    apt-get update && apt-get install -y \
        python3-pip \
        python3-colcon-common-extensions \
        python3-rosdep \
        python3-vcstool \
        libusb-1.0 \
        usbutils \
        screen \
        ros-$ROS_DISTRO-teleop-twist-keyboard \
        git && \
    apt-get upgrade -y && \
    pip3 install pyftdi sh && \
    # build & install ROSbot XL packages
    source "/opt/$MYDISTRO/$ROS_DISTRO/setup.bash" && \
    git clone https://github.com/husarion/rosbot_xl_ros.git /ros2_ws/src && \
    vcs import src < src/rosbot_xl/rosbot_xl_hardware.repos && \
    # it is necessary to remove simulation - otherwise rosdep tries to install dependencies
    rm -r src/rosbot_xl_gazebo && \
    # without this line (using vulcanexus base image) rosdep init throws error: "ERROR: default sources list file already exists:"
    rm -rf /etc/ros/rosdep/sources.list.d/20-default.list && \
    rosdep init && \
    rosdep update --rosdistro $ROS_DISTRO && \
    rosdep install -i --from-path src --rosdistro $ROS_DISTRO -y && \
    # Create healthcheck package
    cd src/ && \
    ros2 pkg create healthcheck_pkg --build-type ament_cmake --dependencies rclcpp nav_msgs && \
    sed -i '/find_package(nav_msgs REQUIRED)/a \
            add_executable(healthcheck_node src/healthcheck.cpp)\n \
            ament_target_dependencies(healthcheck_node rclcpp nav_msgs)\n \
            install(TARGETS healthcheck_node DESTINATION lib/${PROJECT_NAME})' \
            /ros2_ws/src/healthcheck_pkg/CMakeLists.txt && \
    mv /healthcheck.cpp /ros2_ws/src/healthcheck_pkg/src/ && \
    cd .. && \
    # Build
    colcon build --cmake-args -DCMAKE_BUILD_TYPE=Release && \
    # Save version
    echo $(cat /ros2_ws/src/rosbot_xl/package.xml | grep '<version>' | sed -r 's/.*<version>([0-9]+.[0-9]+.[0-9]+)<\/version>/\1/g') > /version.txt && \
    # Size optimalization
    export SUDO_FORCE_REMOVE=yes && \
    apt-get remove -y \
        python3-colcon-common-extensions \
        python3-rosdep \
        python3-vcstool \
        git && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf build log src && \
    rm -rf /var/lib/apt/lists/*

COPY --from=stm32flash_builder /stm32flash/stm32flash /usr/bin/
COPY --from=stm32_firmware /firmware.bin /firmware.bin
COPY --from=stm32_firmware /read_cpu_id/.pio/build/olimex_e407/firmware.bin /firmware_read_cpu_id.bin

COPY flash-firmware.py /usr/bin/
COPY ftdi-eeprom-conf.py /usr/bin/
COPY print-serial-number.py /usr/bin/

# Run healthcheck in background
RUN if [ -f "/ros_entrypoint.sh" ]; then \
        sed -i '/test -f "\/ros2_ws\/install\/setup.bash" && source "\/ros2_ws\/install\/setup.bash"/a \
        ros2 run healthcheck_pkg healthcheck_node &' \
        /ros_entrypoint.sh; \
    else \
        sed -i '/test -f "\/ros2_ws\/install\/setup.bash" && source "\/ros2_ws\/install\/setup.bash"/a \
        ros2 run healthcheck_pkg healthcheck_node &' \
        /vulcanexus_entrypoint.sh; \
    fi

COPY ./healthcheck.sh /
HEALTHCHECK --interval=5s --timeout=2s  --start-period=5s --retries=4 \
    CMD ["/healthcheck.sh"]
