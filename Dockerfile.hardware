ARG ROS_DISTRO=humble
ARG PREFIX=

## =========================== Healthcheck builder ===============================

FROM husarnet/ros:${PREFIX}${ROS_DISTRO}-ros-base AS healthcheck_builder

ARG ROS_DISTRO
ARG PREFIX

SHELL ["/bin/bash", "-c"]

WORKDIR /ros2_ws

RUN mkdir src && \
    cd src && \
    MYDISTRO=${PREFIX:-ros}; MYDISTRO=${MYDISTRO//-/} && \
    source /opt/$MYDISTRO/$ROS_DISTRO/setup.bash && \
    # Create health check package
    ros2 pkg create healthcheck_pkg --build-type ament_cmake --dependencies rclcpp nav_msgs && \
    sed -i '/find_package(nav_msgs REQUIRED)/a \
        add_executable(healthcheck_node src/healthcheck.cpp)\n \
        ament_target_dependencies(healthcheck_node rclcpp nav_msgs)\n \
        install(TARGETS healthcheck_node DESTINATION lib/${PROJECT_NAME})' \
        /ros2_ws/src/healthcheck_pkg/CMakeLists.txt

COPY healthcheck.cpp src/healthcheck_pkg/src/

RUN MYDISTRO=${PREFIX:-ros}; MYDISTRO=${MYDISTRO//-/} && \
    source /opt/$MYDISTRO/$ROS_DISTRO/setup.bash && \
    colcon build --cmake-args -DCMAKE_BUILD_TYPE=Release && \
    rm -rf build log src

## =========================== ROS builder ===============================
FROM husarnet/ros:${PREFIX}${ROS_DISTRO}-ros-base AS ros_builder

ARG ROS_DISTRO
ARG PREFIX

SHELL ["/bin/bash", "-c"]

WORKDIR /ros2_ws
RUN mkdir src

RUN apt-get update && apt-get install -y \
        python3-pip

RUN git clone --depth 1 -b master https://github.com/husarion/rosbot_xl_ros.git src && \
    vcs import src < src/rosbot_xl/rosbot_xl_hardware.repos && \
    cp -r src/ros2_controllers/diff_drive_controller src/ && \
    cp -r src/ros2_controllers/imu_sensor_broadcaster src/ && \
    rm -rf src/ros2_controllers && \
    # it is necessary to remove simulation - otherwise rosdep tries to install dependencies
    rm -r src/rosbot_xl_gazebo && \
    # without this line (using vulcanexus base image) rosdep init throws error: "ERROR: default sources list file already exists:"
    rm -rf /etc/ros/rosdep/sources.list.d/20-default.list && \
    rosdep init && \
    rosdep update --rosdistro $ROS_DISTRO && \
    rosdep install --from-paths src --ignore-src -y --simulate > /rosdep_output.txt && \
    rosdep install --from-paths src --ignore-src -y && \
    MYDISTRO=${PREFIX:-ros}; MYDISTRO=${MYDISTRO//-/} && \
    source /opt/$MYDISTRO/$ROS_DISTRO/setup.bash && \
    colcon build --cmake-args -DCMAKE_BUILD_TYPE=Release  && \
    echo $(cat /ros2_ws/src/rosbot_xl/package.xml | grep '<version>' | sed -r 's/.*<version>([0-9]+.[0-9]+.[0-9]+)<\/version>/\1/g') > /version.txt && \
    # for backward compatibility
    chmod +x src/rosbot_xl_utils/rosbot_xl_utils/flash-firmware.py && \
    cp src/rosbot_xl_utils/rosbot_xl_utils/flash-firmware.py / && \
    cp install/rosbot_xl_utils/share/rosbot_xl_utils/firmware/firmware-*.bin /firmware.bin && \
    # make the /ros2_ws smaller
    rm -rf build log src

## =========================== Final Stage ===============================
FROM husarnet/ros:${PREFIX}${ROS_DISTRO}-ros-core

ARG ROS_DISTRO
ARG PREFIX

SHELL ["/bin/bash", "-c"]

WORKDIR /ros2_ws

COPY --from=ros_builder /ros2_ws /ros2_ws
COPY --from=ros_builder /version.txt /version.txt
COPY --from=ros_builder /rosdep_output.txt /rosdep_output.txt

# for backward compatibility
COPY --from=ros_builder /flash-firmware.py /flash-firmware.py
COPY --from=ros_builder /flash-firmware.py /usr/bin/flash-firmware.py
COPY --from=ros_builder /firmware.bin /firmware.bin
COPY --from=ros_builder /firmware.bin /root/firmware.bin

COPY --from=healthcheck_builder /ros2_ws /ros2_ws_healthcheck

RUN apt-get update && apt-get install -y \
        python3-pip \
        stm32flash \
        libusb-1.0 \
        screen \
        ros-$ROS_DISTRO-robot-state-publisher \
        ros-$ROS_DISTRO-teleop-twist-keyboard && \
    bash -c "$(cat /rosdep_output.txt)" && \
    apt-get remove -y \
        python3-pip && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

COPY healthcheck.sh /
COPY ./husarion_utils /husarion_utils

COPY run_healthcheck_node.sh /
COPY ftdi-eeprom-conf.py /usr/bin/
COPY print-serial-number.py /usr/bin/

ENV ROBOT_NAMESPACE=

HEALTHCHECK --interval=2s --timeout=1s --start-period=30s --retries=1 \
    CMD ["/healthcheck.sh"]

RUN sed -i "/# <additional-user-commands>/r /run_healthcheck_node.sh" /*_entrypoint.sh && \
    sed -i "/# <additional-user-commands>/d" /*_entrypoint.sh && \
    rm -rf /run_healthcheck_node.sh
